# bot.py

import os
import logging
import threading
import time
import datetime
import json
from uuid import uuid4
from http.server import HTTPServer, BaseHTTPRequestHandler

import pytz
import requests
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext, Job, ConversationHandler, MessageHandler, Filters
import html
REMINDER_DATE, REMINDER_TEXT = range(2)

# ‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî
logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ‚Äî –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ‚Äî
BOT_TOKEN       = os.environ['BOT_TOKEN']
PORT            = int(os.environ.get("PORT", "8000"))
BASE_URL        = os.environ.get("BASE_URL")
CHATS_FILE      = 'chats.json'
REMINDERS_FILE  = 'reminders.json'

# ‚Äî –ú–æ—Å–∫–æ–≤—Å–∫–∞—è –∑–æ–Ω–∞ (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π) ‚Äî
MSK = pytz.timezone("Europe/Moscow")

# ‚Äî HTTP-healthcheck –¥–ª—è Render ‚Äî
class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

# ‚Äî –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ ‚Äî
def run_http_server():
    HTTPServer(('0.0.0.0', PORT), HealthHandler).serve_forever()

# ‚Äî Keep-alive, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å–ø–∞–ª ‚Äî
def keep_alive():
    if not BASE_URL:
        logger.warning("BASE_URL –Ω–µ –∑–∞–¥–∞–Ω, keep-alive –æ—Ç–∫–ª—é—á—ë–Ω")
        return
    while True:
        try:
            requests.get(BASE_URL, timeout=5)
            logger.info("Keep-alive pinged %s", BASE_URL)
        except Exception as e:
            logger.warning("Keep-alive failed: %s", e)
        time.sleep(300)

# ‚Äî –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ (—á–∞—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è) ‚Äî
def load_chats():
    try:
        with open(CHATS_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return []

def save_chats(chats):
    with open(CHATS_FILE, 'w') as f:
        json.dump(chats, f)


def load_reminders():
    try:
        with open(REMINDERS_FILE, 'r') as f:
            return json.load(f)
    except Exception:
        return []

def save_reminders(reminders):
    with open(REMINDERS_FILE, 'w') as f:
        json.dump(reminders, f)

# ‚Äî Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî
def reminder_callback(context: CallbackContext):
    job: Job = context.job
    data = job.context
    text = data.get('text')
    # Broadcast to all connected chats instead of single chat
    broadcast(text, context)

    # –ï—Å–ª–∏ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
    if data.get('type') == 'once':
        reminders = load_reminders()
        reminders = [r for r in reminders if r['id'] != data['id']]
        save_reminders(reminders)

# ‚Äî –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî
def schedule_all_reminders(job_queue):
    reminders = load_reminders()
    now = datetime.datetime.now(MSK)
    for rem in reminders:
        data = rem.copy()
        rem_type = rem.get('type')

        if rem_type == 'once':
            send_dt = datetime.datetime.fromisoformat(rem['send_time']).astimezone(MSK)
            if send_dt > now:
                delay = (send_dt - now).total_seconds()
                job_queue.run_once(reminder_callback, delay, context=data)

        elif rem_type == 'daily':
            hh, mm = map(int, rem['time'].split(':'))
            job_queue.run_daily(reminder_callback,
                                time=datetime.time(hh, mm),
                                context=data)

        elif rem_type == 'weekly':
            hh, mm = map(int, rem['time'].split(':'))
            days = rem.get('days', [])  # 0=Monday ... 6=Sunday
            job_queue.run_daily(reminder_callback,
                                time=datetime.time(hh, mm),
                                days=tuple(days),
                                context=data)


# ‚Äî –°—Ç–∞—Ç–∏—á–Ω—ã–µ –±–æ–µ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî
SCHEDULE = [
    {"id": "1", "time": "20:50", "text": 'üîÑ <a href="https://t.me/c/123456/1">–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã API deposits</a>'},
    {"id": "2", "time": "20:50", "text": 'üì¢  <a href="https://t.me/c/123456/2">–í—ã–∫–ª—é—á–∏—Ç—å –¥–µ–ø–æ–∑–∏—Ç—ã BDT_rocket_gb ...</a>'},
    {"id": "3", "time": "20:51", "text": 'üìä <a href="https://t.me/c/123456/3">–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º</a>'},
    {"id": "4", "time": "21:00", "text": '‚ö†Ô∏è <a href="https://t.me/c/123456/4">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏</a>'},
    {"id": "5", "time": "21:15", "text": 'üõ†Ô∏è <a href="https://t.me/c/123456/5">–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</a>'},
    {"id": "6", "time": "21:30", "text": 'üîî <a href="https://t.me/c/123456/6">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–µ</a>'},
    {"id": "7", "time": "22:00", "text": 'üìÖ <a href="https://t.me/c/123456/7">–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞</a>'},
    {"id": "8", "time": "22:30", "text": '‚úÖ <a href="https://t.me/c/123456/8">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á</a>'},
    {"id": "9", "time": "23:00", "text": 'üì¢ <a href="https://t.me/c/123456/9">–û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å</a>'},
    {"id": "10", "time": "23:30", "text": 'üïí <a href="https://t.me/c/123456/10">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</a>'},
    {"id": "11", "time": "23:45", "text": 'üìà <a href="https://t.me/c/123456/11">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</a>'},
    {"id": "12", "time": "23:50", "text": 'üöÄ <a href="https://t.me/c/123456/12">–ó–∞–ø—É—Å–∫ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π</a>'},
    {"id": "13", "time": "23:55", "text": 'üîí <a href="https://t.me/c/123456/13">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</a>'},
]

# ‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ SCHEDULE ‚Äî
def init_default_reminders():
    reminders = load_reminders()
    if not reminders:
        for item in SCHEDULE:
            rem = {'id': item['id'], 'type': 'daily', 'time': item['time'], 'text': item['text']}
            reminders.append(rem)
        save_reminders(reminders)

# ‚Äî –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã (–±–æ–µ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏) ‚Äî
def broadcast(text: str, context: CallbackContext):
    chats = load_chats()
    for chat_id in chats:
        try:
            context.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ %s: %s", chat_id, e)

# ‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ‚Äî
def error_handler(update: Update, context: CallbackContext):
    if isinstance(context.error, Conflict):
        return
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", exc_info=context.error)

def start_add_one_reminder(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (YYYY-MM-DD HH:MM) –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    return REMINDER_DATE

def receive_reminder_datetime(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        dt = MSK.localize(datetime.datetime.strptime(text, "%Y-%m-%d %H:%M"))
        if dt <= datetime.datetime.now(MSK):
            update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ /cancel")
            return REMINDER_DATE
        context.user_data['reminder_dt'] = dt
        update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        return REMINDER_TEXT
    except ValueError:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD HH:MM –∏–ª–∏ /cancel")
        return REMINDER_DATE

def receive_reminder_text(update: Update, context: CallbackContext):
    # Preserve Telegram-formatted links by rebuilding text with HTML tags
    msg = update.message
    raw = msg.text or ""
    entities = msg.entities or []
    html_text = ""
    last = 0
    for ent in entities:
        if ent.type in ("text_link", "url"):
            # append escaped text before the entity
            html_text += html.escape(raw[last:ent.offset])
            label = raw[ent.offset:ent.offset + ent.length]
            url = ent.url if ent.type == "text_link" else label
            html_text += f'<a href="{html.escape(url)}">{html.escape(label)}</a>'
            last = ent.offset + ent.length
    # append any remaining text
    html_text += html.escape(raw[last:])
    text = html_text
    dt = context.user_data.pop('reminder_dt')
    reminders = load_reminders()
    # assign short incremental ID
    max_id = max((int(r['id']) for r in reminders), default=0)
    new_id = str(max_id + 1)
    rem = {'id': new_id, 'type': 'once', 'chat_id': update.effective_chat.id,
           'text': text, 'send_time': dt.isoformat()}
    reminders.append(rem)
    save_reminders(reminders)
    delay = (dt - datetime.datetime.now(MSK)).total_seconds()
    context.job_queue.run_once(reminder_callback, delay, context=rem)
    update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {new_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')}", parse_mode=ParseMode.HTML)
    return ConversationHandler.END

def cancel_reminder(update: Update, context: CallbackContext):
    update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode=ParseMode.HTML)
    return ConversationHandler.END

# ‚Äî –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ‚Äî
def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    chats = load_chats()
    if chat_id not in chats:
        chats.append(chat_id)
        save_chats(chats)
    update.message.reply_text("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")


def test(update: Update, context: CallbackContext):
    update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!")

# # ‚Äî –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî
# def add_one_reminder(update: Update, context: CallbackContext):
#     chat_id = update.effective_chat.id
#     args = context.args
#     if len(args) < 3:
#         update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind YYYY-MM-DD HH:MM —Ç–µ–∫—Å—Ç")
#         return
#     date_str, time_str = args[0], args[1]
#     text = ' '.join(args[2:])
#     try:
#         dt = MSK.localize(datetime.datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M"))
#     except ValueError:
#         update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")
#         return
#     if dt <= datetime.datetime.now(MSK):
#         update.message.reply_text("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
#         return
#     rem_id = str(uuid4())
#     rem = {'id': rem_id, 'type': 'once', 'chat_id': chat_id, 'text': text, 'send_time': dt.isoformat()}
#     reminders = load_reminders() + [rem]
#     save_reminders(reminders)
#     delay = (dt - datetime.datetime.now(MSK)).total_seconds()
#     context.job_queue.run_once(reminder_callback, delay, context=rem)
#     update.message.reply_text(f"‚úÖ –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rem_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {dt.strftime('%Y-%m-%d %H:%M')}")

# ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî
def add_daily_reminder(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    args = context.args
    if len(args) < 2:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind_daily –ß–ß:–ú–ú —Ç–µ–∫—Å—Ç")
        return
    time_str = args[0]
    text = ' '.join(args[1:])
    try:
        hh, mm = map(int, time_str.split(':'))
    except Exception:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    rem_id = str(uuid4())
    rem = {'id': rem_id, 'type': 'daily', 'chat_id': chat_id, 'text': text, 'time': time_str}
    reminders = load_reminders() + [rem]
    save_reminders(reminders)
    context.job_queue.run_daily(reminder_callback,
                                time=datetime.time(hh, mm),
                                context=rem)
    update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rem_id} –Ω–∞ {time_str}")

# ‚Äî –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî
def add_weekly_reminder(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    args = context.args
    if len(args) < 3:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remind_weekly <–î–µ–Ω—å> –ß–ß:–ú–ú —Ç–µ–∫—Å—Ç (–î–µ–Ω—å = –ü–Ω,–í—Ç,–°—Ä,–ß—Ç,–ü—Ç,–°–±,–í—Å)")
        return
    day_str, time_str = args[0], args[1]
    text = ' '.join(args[2:])
    days_map = {'Mon':0,'Tue':1,'Wed':2,'Thu':3,'Fri':4,'Sat':5,'Sun':6}
    if day_str not in days_map:
        update.message.reply_text("–î–µ–Ω—å —É–∫–∞–∑–∞—Ç—å –∫–∞–∫ –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–± –∏–ª–∏ –í—Å")
        return
    try:
        hh, mm = map(int, time_str.split(':'))
    except Exception:
        update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    rem_id = str(uuid4())
    rem = {
        'id': rem_id,
        'type': 'weekly',
        'chat_id': chat_id,
        'text': text,
        'time': time_str,
        'days': [days_map[day_str]]
    }
    reminders = load_reminders() + [rem]
    save_reminders(reminders)
    context.job_queue.run_daily(reminder_callback,
                                time=datetime.time(hh, mm),
                                days=(days_map[day_str],),
                                context=rem)
    update.message.reply_text(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rem_id} –∫–∞–∂–¥—ã–π {day_str} –≤ {time_str}")

# ‚Äî –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚Äî
def list_reminders(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    reminders = load_reminders()
    if not reminders:
        update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        return
    lines = ["üìã <b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>"]
    ru_types = {'once': '–æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ', 'daily': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ', 'weekly': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ'}
    ru_days = ['–ü–Ω','–í—Ç','–°—Ä','–ß—Ç','–ü—Ç','–°–±','–í—Å']
    for r in reminders:
        typ = r.get('type', '')
        typ_ru = ru_types.get(typ, typ)
        if typ == 'once':
            dt = datetime.datetime.fromisoformat(r['send_time']).astimezone(MSK)
            time_str = dt.strftime("%d.%m.%Y %H:%M")
            line = f"ID: {r['id']} | {typ_ru} @ {time_str} ‚Üí {r['text']}"
        elif typ == 'daily':
            line = f"ID: {r['id']} | {typ_ru} @ {r['time']} ‚Üí {r['text']}"
        elif typ == 'weekly':
            day_num = r.get('days', [None])[0]
            day_ru = ru_days[day_num] if day_num is not None and 0 <= day_num < 7 else "?"
            line = f"ID: {r['id']} | {typ_ru} {day_ru} @ {r['time']} ‚Üí {r['text']}"
        else:
            line = f"ID: {r['id']} | {typ_ru} ‚Üí {r['text']}"
        lines.append(line)
    update.message.reply_text("\n".join(lines), parse_mode=ParseMode.HTML)

# ‚Äî –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ ID ‚Äî
def del_reminder(update: Update, context: CallbackContext):
    args = context.args
    if not args:
        update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /del_reminder ID")
        return
    rem_id = args[0]
    reminders = load_reminders()
    new = [r for r in reminders if r['id'] != rem_id]
    if len(new) == len(reminders):
        update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    save_reminders(new)
    # –æ—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
    for job in context.job_queue.get_jobs():
        if hasattr(job, 'context') and job.context.get('id') == rem_id:
            job.schedule_removal()
    update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {rem_id} —É–¥–∞–ª–µ–Ω–æ.")



# ‚Äî –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ —Å—Ç–∞—Ç–∏—á–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ ‚Äî
def clear_reminders(update: Update, context: CallbackContext):
    # Delete all user reminders
    save_reminders([])
    # Cancel all user reminder jobs
    for job in context.job_queue.get_jobs():
        if hasattr(job.context, 'get') and job.context.get('type') in ('once','daily','weekly'):
            job.schedule_removal()
    update.message.reply_text("‚úÖ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")


# ‚Äî –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ‚Äî
def main():
    threading.Thread(target=run_http_server, daemon=True).start()
    threading.Thread(target=keep_alive, daemon=True).start()

    updater = Updater(token=BOT_TOKEN, use_context=True)
    updater.bot.delete_webhook()
    dp = updater.dispatcher
    dp.add_error_handler(error_handler)

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("test", test))
    conv = ConversationHandler(
        entry_points=[CommandHandler("remind", start_add_one_reminder)],
        states={
            REMINDER_DATE: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_datetime)],
            REMINDER_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_text)],
        },
        fallbacks=[CommandHandler("cancel", cancel_reminder)],
    )
    dp.add_handler(conv)
    dp.add_handler(CommandHandler("remind_daily", add_daily_reminder))
    dp.add_handler(CommandHandler("remind_weekly", add_weekly_reminder))
    dp.add_handler(CommandHandler("list_reminders", list_reminders))
    dp.add_handler(CommandHandler("del_reminder", del_reminder))

    # –¢–æ–ª—å–∫–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è /list_reminders, /del_reminder, /clear_reminders
    dp.add_handler(CommandHandler("clear_reminders", clear_reminders))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    init_default_reminders()
    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule_all_reminders(updater.job_queue)
    # schedule_notifications(updater.job_queue)  # –£–¥–∞–ª–µ–Ω–æ

    updater.start_polling(drop_pending_updates=True)
    logger.info("Polling –Ω–∞—á–∞—Ç, –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    updater.idle()

if __name__ == "__main__":
    main()
