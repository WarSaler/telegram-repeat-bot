# bot.py

import os
import logging
import threading
import time
from datetime import datetime, time as dt_time, timedelta
import json
import pytz
import requests
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, CallbackContext, Job, ConversationHandler, MessageHandler, Filters
from telegram.error import Conflict, BadRequest
import html
from http.server import BaseHTTPRequestHandler, HTTPServer

# ‚úÖ –ò–ú–ü–û–†–¢ GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
try:
    from sheets_integration import SheetsManager
    sheets_manager = SheetsManager()
    SHEETS_AVAILABLE = True
    logger_temp = logging.getLogger(__name__)
    logger_temp.info("‚úÖ Google Sheets integration loaded successfully")
except Exception as e:
    sheets_manager = None
    SHEETS_AVAILABLE = False
    logger_temp = logging.getLogger(__name__)
    logger_temp.warning(f"üìµ Google Sheets integration not available: {e}")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class HealthHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.end_headers()
        self.wfile.write(b'OK')

    def do_HEAD(self):
        # Respond to health check HEAD requests
        self.send_response(200)
        self.end_headers()

def start_health_server():
    port = int(os.environ.get('PORT', 5000))
    server = HTTPServer(('0.0.0.0', port), HealthHandler)
    server.serve_forever()

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
REMINDERS_FILE = "reminders.json"

logging.basicConfig(
    format="%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def get_moscow_time():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è"""
    return datetime.now(MOSCOW_TZ)

def moscow_time_to_utc(moscow_dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC"""
    if isinstance(moscow_dt, str):
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞, –ø–∞—Ä—Å–∏–º –µ–µ –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        naive_dt = datetime.strptime(moscow_dt, "%Y-%m-%d %H:%M")
        moscow_dt = MOSCOW_TZ.localize(naive_dt)
    elif moscow_dt.tzinfo is None:
        # –ï—Å–ª–∏ naive datetime, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –º–æ—Å–∫–æ–≤—Å–∫–∏–º
        moscow_dt = MOSCOW_TZ.localize(moscow_dt)
    
    return moscow_dt.astimezone(pytz.UTC)

def utc_to_moscow_time(utc_dt):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å UTC –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ"""
    if utc_dt.tzinfo is None:
        utc_dt = pytz.UTC.localize(utc_dt)
    return utc_dt.astimezone(MOSCOW_TZ)

def format_moscow_time(dt):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if isinstance(dt, str):
        return dt
    moscow_dt = utc_to_moscow_time(dt) if dt.tzinfo else MOSCOW_TZ.localize(dt)
    return moscow_dt.strftime("%Y-%m-%d %H:%M MSK")

def error_handler(update: Update, context: CallbackContext):
    """
    Handle errors by logging them without crashing the bot.
    """
    if isinstance(context.error, Conflict):
        logger.warning("‚ö†Ô∏è Conflict error: Multiple bot instances detected")
        logger.warning("   This usually means:")
        logger.warning("   1. Another bot instance is running")
        logger.warning("   2. Previous deployment is still active")
        logger.warning("   3. Development and production bots conflict")
        logger.warning("   Continuing to run, conflicts should resolve automatically...")
        return
    elif isinstance(context.error, BadRequest):
        logger.warning(f"‚ö†Ô∏è Bad request: {context.error}")
        return
    
    logger.error("‚ùå Uncaught exception:", exc_info=context.error)

def subscribe_chat(chat_id, chat_name="Unknown", chat_type="private", members_count=None):
    try:
        with open("subscribed_chats.json", "r") as f:
            data = f.read().strip()
            chats = json.loads(data) if data else []
    except (FileNotFoundError, json.JSONDecodeError):
        chats = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –Ω–æ–≤—ã–º
    is_new_chat = chat_id not in chats
    
    if is_new_chat:
        chats.append(chat_id)
        save_chats(chats)
        logger.info(f"üÜï New chat subscribed: {chat_id} ({chat_name})")
        
        # ‚úÖ –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ó–ê–ü–ò–°–¨ –í GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                sheets_manager.update_chat_stats(chat_id, chat_name, chat_type, members_count)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="CHAT_SUBSCRIBE",
                    user_id="SYSTEM",
                    username="AutoSubscribe",
                    chat_id=chat_id,
                    details=f"New chat subscribed: {chat_name} ({chat_type}), Members: {members_count or 'N/A'}",
                    reminder_id=""
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ Google Sheets
                sheets_manager.sync_subscribed_chats_to_sheets(chats)
                
                logger.info(f"üìä Successfully synced new chat {chat_id} to Google Sheets")
                
            except Exception as e:
                logger.error(f"‚ùå Error syncing new chat to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - chat {chat_id} subscription not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for new chat sync")
    else:
        # –ï—Å–ª–∏ —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.update_chat_stats(chat_id, chat_name, chat_type, members_count)
                logger.info(f"üìä Updated existing chat {chat_id} info in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error updating chat info in Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - chat {chat_id} info not updated")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")

def save_chats(chats):
    with open("subscribed_chats.json", "w") as f:
        json.dump(chats, f)

# –§—É–Ω–∫—Ü–∏—è ping –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
def ping_self(context: CallbackContext):
    """
    –ü–∏–Ω–≥—É–µ—Ç —Å–∞–º —Å–µ–±—è —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞—Ç—å –Ω–∞ Render free tier
    """
    try:
        base_url = os.environ.get('BASE_URL', 'https://telegram-repeat-bot.onrender.com')
        response = requests.get(base_url, timeout=5)
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Self-ping successful at {moscow_time}: {response.status_code}")
    except Exception as e:
        logger.warning(f"Self-ping failed: {e}")

def safe_html_escape(text):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏
    """
    if not text:
        return ""
    
    # –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö HTML —Ç–µ–≥–æ–≤
    allowed_tags = ['<b>', '</b>', '<i>', '</i>', '<u>', '</u>', '<s>', '</s>', '<code>', '</code>', '<pre>', '</pre>']
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Ç–µ–≥–∞—Ö <a>
        if '<a ' in text and 'href=""' in text:
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Å—ã–ª–∫–∏
            text = text.replace('<a href="">', '').replace('</a>', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥—Ä—É–≥–∏—Ö —Ç–µ–≥–æ–≤
        if '<' in text and '>' in text:
            # –ï—Å–ª–∏ –µ—Å—Ç—å HTML —Ç–µ–≥–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return text
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç HTML —Ç–µ–≥–æ–≤, —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
            return html.escape(text)
    except:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        return html.escape(text)

# --- /start –∏ /test –∫–æ–º–∞–Ω–¥—ã ---
def start(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    try:
        chat_id = update.effective_chat.id
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Received /start from chat {chat_id} at {moscow_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = update.effective_chat
        chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
        chat_type = chat.type
        members_count = None
        try:
            if chat_type in ["group", "supergroup"]:
                members_count = context.bot.get_chat_members_count(chat_id)
        except:
            pass
        
        subscribe_chat(chat_id, chat_name, chat_type, members_count)
        context.bot.send_message(chat_id=chat_id,
                                 text="‚úÖ <b>–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ</b>\n‚è∞ <i>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>",
                                 parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        try:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ\n‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        except:
            pass

def test(update: Update, context: CallbackContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    """
    try:
        chat_id = update.effective_chat.id
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"Received /test from chat {chat_id} at {moscow_time}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = update.effective_chat
        chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
        chat_type = chat.type
        members_count = None
        try:
            if chat_type in ["group", "supergroup"]:
                members_count = context.bot.get_chat_members_count(chat_id)
        except:
            pass
        
        subscribe_chat(chat_id, chat_name, chat_type, members_count)
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        context.bot.send_message(chat_id=chat_id,
                                 text=f"‚úÖ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</b>\n‚è∞ <i>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}</i>",
                                 parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.error(f"Error in test command: {e}")
        try:
            current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
            context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
        except:
            pass

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è ConversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
REMINDER_DATE, REMINDER_TEXT = range(2)
DAILY_TIME, DAILY_TEXT = range(2)
WEEKLY_DAY, WEEKLY_TIME, WEEKLY_TEXT = range(3)
REM_DEL_ID = 0

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫) ---
def load_reminders():
    """
    Load reminders from the JSON file, returning an empty list if the file is missing,
    empty, or contains invalid JSON.
    """
    try:
        with open(REMINDERS_FILE, "r", encoding='utf-8') as f:
            data = f.read().strip()
            if not data:
                return []
            return json.loads(data)
    except (FileNotFoundError, json.JSONDecodeError):
        return []

def save_reminders(reminders):
    try:
        with open(REMINDERS_FILE, "w", encoding='utf-8') as f:
            json.dump(reminders, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"Error saving reminders: {e}")

def get_next_reminder_id():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    """
    try:
        reminders = load_reminders()
        if not reminders:
            return "1"
        
        # –ù–∞–π—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID –∏ –¥–æ–±–∞–≤–∏—Ç—å 1
        max_id = 0
        for reminder in reminders:
            try:
                reminder_id = int(reminder.get("id", "0"))
                if reminder_id > max_id:
                    max_id = reminder_id
            except ValueError:
                continue
        
        return str(max_id + 1)
    except Exception as e:
        logger.error(f"Error generating reminder ID: {e}")
        return "1"

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_one_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        update.message.reply_text(f"üìÖ <b>–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-07-10 16:30\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return REMINDER_DATE
    except Exception as e:
        logger.error(f"Error in start_add_one_reminder: {e}")
        current_time = get_moscow_time().strftime("%Y-%m-%d %H:%M MSK")
        update.message.reply_text(f"üìÖ –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2024-07-10 16:30\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return REMINDER_DATE

def receive_reminder_datetime(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        moscow_dt = datetime.strptime(text, "%Y-%m-%d %H:%M")
        moscow_dt = MOSCOW_TZ.localize(moscow_dt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if moscow_dt < get_moscow_time():
            try:
                update.message.reply_text("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏:", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–∏.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
            return REMINDER_DATE
        
        context.user_data["reminder_datetime"] = text
        context.user_data["reminder_datetime_moscow"] = moscow_dt
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
        return REMINDER_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return REMINDER_DATE

def receive_reminder_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º HTML
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "once",
            "datetime": context.user_data["reminder_datetime"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": context.user_data["reminder_datetime"],
                    "type": "once",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üìÖ <i>{context.user_data['reminder_datetime']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['reminder_datetime']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_reminder_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_daily_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üîÑ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return DAILY_TIME
    except:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n–ù–∞–ø—Ä–∏–º–µ—Ä: 08:00\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return DAILY_TIME

def receive_daily_time(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        time.strptime(text, "%H:%M")
        context.user_data["daily_time"] = text
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):\n<i>‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        return DAILY_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return DAILY_TIME

def receive_daily_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "daily",
            "time": context.user_data["daily_time"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created daily reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": context.user_data["daily_time"],
                    "type": "daily",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced daily reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing daily reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - daily reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for daily reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üïê <i>–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {context.user_data['daily_time']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['daily_time']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_daily_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_add_weekly_reminder(update: Update, context: CallbackContext):
    try:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üìÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n<i>‚è∞ –°–µ–π—á–∞—Å: {current_time}</i>", parse_mode=ParseMode.HTML)
        return WEEKLY_DAY
    except:
        current_time = get_moscow_time().strftime("%H:%M MSK")
        update.message.reply_text(f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n–í–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n‚è∞ –°–µ–π—á–∞—Å: {current_time}")
        return WEEKLY_DAY

def receive_weekly_day(update: Update, context: CallbackContext):
    text = update.message.text.strip().lower()
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    if text not in days:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑:\n–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞, –°—É–±–±–æ—Ç–∞, –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ")
        return WEEKLY_DAY
    context.user_data["weekly_day"] = text
    try:
        update.message.reply_text("üïê <b>–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("üïê –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    return WEEKLY_TIME

def receive_weekly_time(update: Update, context: CallbackContext):
    text = update.message.text.strip()
    try:
        time.strptime(text, "%H:%M")
        context.user_data["weekly_time"] = text
        try:
            update.message.reply_text("‚úèÔ∏è <b>–¢–µ–∫—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è HTML —Ç–µ–≥–∏ –∏ —Å—Å—ã–ª–∫–∏):\n<i>‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)</i>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚úèÔ∏è –¢–µ–∫—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:\n‚è∞ –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ (MSK)")
        return WEEKLY_TEXT
    except Exception:
        try:
            update.message.reply_text("‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è):")
        return WEEKLY_TIME

def receive_weekly_text(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        new_id = get_next_reminder_id()
        reminder_text = update.message.text_html if update.message.text_html else update.message.text.strip()
        reminder_text = safe_html_escape(reminder_text)
        
        reminders.append({
            "id": new_id,
            "type": "weekly",
            "day": context.user_data["weekly_day"],
            "time": context.user_data["weekly_time"],
            "text": reminder_text
        })
        save_reminders(reminders)
        
        # ‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GOOGLE SHEETS
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                chat_id = update.effective_chat.id
                chat = update.effective_chat
                chat_name = chat.title if chat.title else f"@{chat.username}" if chat.username else str(chat.first_name or "Private")
                username = update.effective_user.username or update.effective_user.first_name or "Unknown"
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                sheets_manager.log_reminder_action("CREATE", update.effective_user.id, username, chat_id, f"Created weekly reminder: {reminder_text[:50]}...", new_id)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                reminder_data = {
                    "id": new_id,
                    "text": reminder_text,
                    "time": f"{context.user_data['weekly_day']} {context.user_data['weekly_time']}",
                    "type": "weekly",
                    "chat_id": chat_id,
                    "chat_name": chat_name,
                    "created_at": get_moscow_time().strftime("%Y-%m-%d %H:%M:%S"),
                    "username": username,
                    "days_of_week": context.user_data["weekly_day"]
                }
                sheets_manager.sync_reminder(reminder_data, "CREATE")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Ç–∞
                sheets_manager.update_reminders_count(chat_id)
                
                logger.info(f"üìä Successfully synced weekly reminder #{new_id} to Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error syncing weekly reminder to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - weekly reminder #{new_id} not synced")
            logger.warning("   Check GOOGLE_SHEETS_ID and GOOGLE_SHEETS_CREDENTIALS environment variables")
        else:
            logger.warning("üìµ Google Sheets not available for weekly reminder sync")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        schedule_reminder(context.dispatcher.job_queue, reminders[-1])
        
        try:
            update.message.reply_text(
                f"‚úÖ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ</b>\n\n"
                f"üìÖ <i>–ö–∞–∂–¥—ã–π {context.user_data['weekly_day'].title()} –≤ {context.user_data['weekly_time']}</i>\n"
                f"üí¨ {reminder_text}", 
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text(f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{new_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ: {context.user_data['weekly_day'].title()} {context.user_data['weekly_time']}")
        
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"Error in receive_weekly_text: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return ConversationHandler.END

# --- –°–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def list_reminders(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        lines = ["üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        
        for i, r in enumerate(reminders, 1):
            try:
                safe_text = safe_html_escape(r.get('text', ''))
                if r["type"] == "once":
                    lines.append(f"{i}. [üìÖ –†–∞–∑–æ–≤–æ] {r['datetime']}\nüí¨ {safe_text}\n")
                elif r["type"] == "daily":
                    lines.append(f"{i}. [üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ] {r['time']}\nüí¨ {safe_text}\n")
                elif r["type"] == "weekly":
                    lines.append(f"{i}. [üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ] {r['day'].title()} {r['time']}\nüí¨ {safe_text}\n")
            except Exception as e:
                logger.error(f"Error formatting reminder {i}: {e}")
                lines.append(f"{i}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞]\n")
        
        message_text = "\n".join(lines)
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_text) > 4000:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
            
            for line in lines[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if len(current_chunk + line) > 4000:
                    chunks.append(current_chunk)
                    current_chunk = line
                else:
                    current_chunk += line
            
            if current_chunk:
                chunks.append(current_chunk)
            
            for chunk in chunks:
                try:
                    update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
                except:
                    # Fallback –±–µ–∑ HTML
                    clean_chunk = chunk.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                    update.message.reply_text(clean_chunk)
        else:
            try:
                update.message.reply_text(message_text, parse_mode=ParseMode.HTML)
            except:
                # Fallback –±–µ–∑ HTML
                clean_text = message_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                update.message.reply_text(clean_text)
                
    except Exception as e:
        logger.error(f"Error in list_reminders: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# --- –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---
def start_delete_reminder(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return ConversationHandler.END
        
        lines = ["üóë –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:\n"]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        
        for i, r in enumerate(reminders, 1):
            try:
                text_preview = r.get('text', '')[:50]
                if len(r.get('text', '')) > 50:
                    text_preview += '...'
                    
                if r["type"] == "once":
                    lines.append(f"{i}. [üìÖ –†–∞–∑–æ–≤–æ] {r['datetime']}\nüí¨ {text_preview}")
                elif r["type"] == "daily":
                    lines.append(f"{i}. [üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ] {r['time']}\nüí¨ {text_preview}")
                elif r["type"] == "weekly":
                    lines.append(f"{i}. [üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ] {r['day'].title()} {r['time']}\nüí¨ {text_preview}")
            except Exception as e:
                logger.error(f"Error formatting reminder for deletion {i}: {e}")
                lines.append(f"{i}. [–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞]")
        
        try:
            update.message.reply_text("\n\n".join(lines), parse_mode=ParseMode.HTML)
        except:
            # Fallback –±–µ–∑ HTML
            clean_text = "\n\n".join(lines).replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            update.message.reply_text(clean_text)
        
        return REM_DEL_ID
        
    except Exception as e:
        logger.error(f"Error in start_delete_reminder: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return ConversationHandler.END

def confirm_delete_reminder(update: Update, context: CallbackContext):
    try:
        reminder_number = int(update.message.text.strip())
        reminders = load_reminders()
        
        if reminder_number < 1 or reminder_number > len(reminders):
            try:
                update.message.reply_text("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ " + str(len(reminders)), parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {len(reminders)}")
            return REM_DEL_ID
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        reminders.sort(key=lambda x: int(x.get("id", "0")))
        reminder_to_delete = reminders[reminder_number - 1]
        
        # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        all_reminders = load_reminders()
        new_list = [r for r in all_reminders if r["id"] != reminder_to_delete["id"]]
        save_reminders(new_list)
        
        try:
            update.message.reply_text(f"‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_number} —É–¥–∞–ª–µ–Ω–æ</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_number} —É–¥–∞–ª–µ–Ω–æ")
        
        # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reschedule_all_reminders(context.dispatcher.job_queue)
        
    except ValueError:
        try:
            update.message.reply_text("‚ùå <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
        return REM_DEL_ID
    except Exception as e:
        logger.error(f"Error in confirm_delete_reminder: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    return ConversationHandler.END

# --- –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
def clear_reminders(update: Update, context: CallbackContext):
    try:
        save_reminders([])
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        job_queue = context.dispatcher.job_queue
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name and job.name.startswith('reminder_'):
                job.schedule_removal()
        
        try:
            update.message.reply_text("üóë <b>–í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã</b>", parse_mode=ParseMode.HTML)
        except:
            update.message.reply_text("üóë –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")
            
    except Exception as e:
        logger.error(f"Error in clear_reminders: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

# --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ Google Sheets ---
def restore_reminders(update: Update, context: CallbackContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ Google Sheets"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google Sheets
        if not SHEETS_AVAILABLE or not sheets_manager:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                    "üìµ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        if not sheets_manager.is_initialized:
            try:
                update.message.reply_text(
                    "‚ùå <b>Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω</b>\n\n"
                    "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n"
                    "‚Ä¢ GOOGLE_SHEETS_ID\n"
                    "‚Ä¢ GOOGLE_SHEETS_CREDENTIALS",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text("‚ùå Google Sheets –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            progress_message = update.message.reply_text(
                "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...</b>\n\n"
                "üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...",
                parse_mode=ParseMode.HTML
            )
        except:
            progress_message = update.message.reply_text("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name or "Unknown"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_START",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details="Manual restore reminders command initiated",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore start: {e}")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        success, message = sheets_manager.restore_reminders_from_sheets()
        
        if success:
            # –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reschedule_all_reminders(context.dispatcher.job_queue)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            try:
                restored_reminders = load_reminders()
                count = len(restored_reminders)
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
                once_count = sum(1 for r in restored_reminders if r.get('type') == 'once')
                daily_count = sum(1 for r in restored_reminders if r.get('type') == 'daily')
                weekly_count = sum(1 for r in restored_reminders if r.get('type') == 'weekly')
                
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                             f"üìä <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {count}</b>\n"
                             f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {once_count}\n"
                             f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {daily_count}\n"
                             f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_count}\n\n"
                             f"‚è∞ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!\n"
                             f"<i>–ö–æ–º–∞–Ω–¥–∞: /list_reminders –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</i>",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text(
                        f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!\n\n"
                        f"üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {count}\n"
                        f"üìÖ –†–∞–∑–æ–≤—ã—Ö: {once_count}\n"
                        f"üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö: {daily_count}\n"
                        f"üìÜ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö: {weekly_count}\n\n"
                        f"‚è∞ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã!"
                    )
                
                logger.info(f"‚úÖ Successfully restored {count} reminders for user {username} (ID: {user_id})")
                
            except Exception as e:
                logger.error(f"Error getting restored reminders count: {e}")
                try:
                    context.bot.edit_message_text(
                        chat_id=progress_message.chat_id,
                        message_id=progress_message.message_id,
                        text=f"‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n{message}",
                        parse_mode=ParseMode.HTML
                    )
                except:
                    update.message.reply_text(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n{message}")
        
        else:
            # –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            try:
                context.bot.edit_message_text(
                    chat_id=progress_message.chat_id,
                    message_id=progress_message.message_id,
                    text=f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n{message}\n\n"
                         f"üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</i>\n"
                         f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google Sheets\n"
                         f"‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –ª–∏—Å—Ç–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
                         f"‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                    parse_mode=ParseMode.HTML
                )
            except:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n{message}")
            
            logger.error(f"‚ùå Failed to restore reminders for user {username}: {message}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        if sheets_manager.is_initialized:
            try:
                moscow_time = get_moscow_time().strftime("%Y-%m-%d %H:%M:%S")
                sheets_manager.log_operation(
                    timestamp=moscow_time,
                    action="RESTORE_COMPLETE",
                    user_id=str(user_id),
                    username=username,
                    chat_id=chat_id,
                    details=f"Manual restore {'successful' if success else 'failed'}: {message}",
                    reminder_id=""
                )
            except Exception as e:
                logger.error(f"Error logging restore completion: {e}")
                
    except Exception as e:
        logger.error(f"Error in restore_reminders: {e}")
        try:
            update.message.reply_text(
                "‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.",
                parse_mode=ParseMode.HTML
            )
        except:
            update.message.reply_text("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

# --- –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ---
def next_notification(update: Update, context: CallbackContext):
    try:
        reminders = load_reminders()
        if not reminders:
            try:
                update.message.reply_text("üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        now_moscow = get_moscow_time()
        soonest = None
        soonest_time = None
        days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        
        for r in reminders:
            t = None
            if r["type"] == "once":
                try:
                    # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                    naive_dt = datetime.strptime(r["datetime"], "%Y-%m-%d %H:%M")
                    t = MOSCOW_TZ.localize(naive_dt)
                    if t < now_moscow:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                        continue
                except ValueError:
                    continue
            elif r["type"] == "daily":
                try:
                    h, m = map(int, r["time"].split(":"))
                    candidate = now_moscow.replace(hour=h, minute=m, second=0, microsecond=0)
                    if candidate < now_moscow:
                        candidate += timedelta(days=1)
                    t = candidate
                except ValueError:
                    continue
            elif r["type"] == "weekly":
                try:
                    weekday = days.index(r["day"])
                    h, m = map(int, r["time"].split(":"))
                    candidate = now_moscow.replace(hour=h, minute=m, second=0, microsecond=0)
                    days_ahead = (weekday - now_moscow.weekday() + 7) % 7
                    if days_ahead == 0 and candidate < now_moscow:
                        days_ahead = 7
                    t = candidate + timedelta(days=days_ahead)
                except (ValueError, IndexError):
                    continue
            
            if t and (soonest_time is None or t < soonest_time):
                soonest_time = t
                soonest = r
        
        if soonest is None:
            try:
                update.message.reply_text("üì≠ <b>–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>", parse_mode=ParseMode.HTML)
            except:
                update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            return
        
        time_diff = soonest_time - now_moscow
        
        if time_diff.days > 0:
            time_str = f"—á–µ—Ä–µ–∑ {time_diff.days} –¥–Ω."
        elif time_diff.seconds > 3600:
            hours = time_diff.seconds // 3600
            time_str = f"—á–µ—Ä–µ–∑ {hours} —á."
        elif time_diff.seconds > 60:
            minutes = time_diff.seconds // 60
            time_str = f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω."
        else:
            time_str = "–º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
        
        safe_text = safe_html_escape(soonest.get('text', ''))
        current_time = now_moscow.strftime("%H:%M MSK")
        
        if soonest["type"] == "once":
            reminder_time = soonest_time.strftime("%Y-%m-%d %H:%M MSK")
            msg = f"üìÖ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –†–∞–∑–æ–≤–æ: {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        elif soonest["type"] == "daily":
            reminder_time = soonest_time.strftime("%H:%M MSK")
            msg = f"üîÑ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –ï–∂–µ–¥–Ω–µ–≤–Ω–æ: {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        elif soonest["type"] == "weekly":
            reminder_time = soonest_time.strftime("%H:%M MSK")
            msg = f"üìÜ <b>–ë–ª–∏–∂–∞–π—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\nüïê –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ: {soonest['day'].title()} {reminder_time}\n‚è∞ {time_str}\nüí¨ {safe_text}\n\n<i>–°–µ–π—á–∞—Å: {current_time}</i>"
        
        try:
            update.message.reply_text(msg, parse_mode=ParseMode.HTML)
        except:
            # Fallback –±–µ–∑ HTML
            clean_msg = msg.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
            update.message.reply_text(clean_msg)
            
    except Exception as e:
        logger.error(f"Error in next_notification: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

def cancel_reminder(update: Update, context: CallbackContext):
    """
    –û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    try:
        update.message.reply_text("‚ùå <b>–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>", parse_mode=ParseMode.HTML)
    except:
        update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    return ConversationHandler.END

# --- Scheduling helpers ---

def send_reminder(context: CallbackContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º —á–∞—Ç–∞–º.
    """
    try:
        reminder = context.job.context
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                if not chats or len(chats) == 0:
                    raise ValueError("Empty chats list")
        except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
            logger.warning(f"‚ö†Ô∏è Problem with subscribed_chats.json: {e}")
            logger.info("üîß Attempting emergency restore...")
            if ensure_subscribed_chats_file():
                try:
                    with open("subscribed_chats.json", "r") as f:
                        chats = json.load(f)
                    logger.info(f"‚úÖ Emergency restore successful, loaded {len(chats)} chats")
                except:
                    logger.error("‚ùå Emergency restore failed, no reminders will be sent")
                    return
            else:
                logger.error("‚ùå Emergency restore failed, no reminders will be sent")
                return
        
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        reminder_text = f"üîî <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b> <i>({moscow_time})</i>\n\n{reminder.get('text', '')}"
        reminder_id = reminder.get('id', 'unknown')
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder_id,
                    chat_id="ALL",
                    status="SENDING",
                    error="",
                    text_preview=reminder.get('text', '')[:50] + "..." if len(reminder.get('text', '')) > 50 else reminder.get('text', '')
                )
                logger.info(f"üìä Logged reminder sending start for #{reminder_id} in Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå Error logging send start to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - reminder #{reminder_id} sending start not logged")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É —á–∞—Ç—É
        total_sent = 0
        total_failed = 0
        
        for cid in chats:
            delivery_status = "SUCCESS"
            error_details = ""
            
            try:
                context.bot.send_message(chat_id=cid, text=reminder_text, parse_mode=ParseMode.HTML)
                logger.info(f"‚úÖ Reminder sent to chat {cid} at {moscow_time}")
                total_sent += 1
                
            except Exception as e:
                logger.error(f"‚ùå Failed to send reminder to chat {cid}: {e}")
                error_details = str(e)
                delivery_status = "FAILED"
                
                # Fallback –±–µ–∑ HTML
                try:
                    clean_text = reminder_text.replace('<b>', '').replace('</b>', '').replace('<i>', '').replace('</i>', '')
                    context.bot.send_message(chat_id=cid, text=clean_text)
                    logger.info(f"‚úÖ Fallback reminder sent to chat {cid} at {moscow_time}")
                    delivery_status = "SUCCESS_FALLBACK"
                    error_details = f"HTML failed: {str(e)}, sent as plain text"
                    total_sent += 1
                    
                except Exception as e2:
                    logger.error(f"‚ùå Failed to send fallback reminder to chat {cid}: {e2}")
                    error_details = f"HTML failed: {str(e)}, Plain text failed: {str(e2)}"
                    total_failed += 1
            
            # üìä –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.log_send_history(
                        utc_time=utc_time,
                        moscow_time=moscow_time,
                        reminder_id=reminder_id,
                        chat_id=str(cid),
                        status=delivery_status,
                        error=error_details,
                        text_preview=reminder.get('text', '')[:50] + "..." if len(reminder.get('text', '')) > 50 else reminder.get('text', '')
                    )
                except Exception as e:
                    logger.error(f"‚ùå Error logging send to Google Sheets for chat {cid}: {e}")
        
        # üìä –ò—Ç–æ–≥–æ–≤—ã–π –ª–æ–≥ –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                final_status = "COMPLETED" if total_failed == 0 else f"PARTIAL ({total_sent}/{total_sent + total_failed})"
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder_id,
                    chat_id="SUMMARY",
                    status=final_status,
                    error=f"Sent: {total_sent}, Failed: {total_failed}",
                    text_preview=f"Total chats: {len(chats)}"
                )
                logger.info(f"üìä Logged final summary for reminder #{reminder_id}: {total_sent} sent, {total_failed} failed")
            except Exception as e:
                logger.error(f"‚ùå Error logging final summary to Google Sheets: {e}")
        elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
            logger.warning(f"üìµ Google Sheets not initialized - final summary for reminder #{reminder_id} not logged")
        
        logger.info(f"üìà Reminder #{reminder_id} delivery summary: {total_sent} sent, {total_failed} failed")
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if reminder.get("type") == "once":
            reminders = load_reminders()
            reminders = [r for r in reminders if r.get("id") != reminder.get("id")]
            save_reminders(reminders)
            logger.info(f"üóëÔ∏è One-time reminder #{reminder_id} removed after sending")
            
            # üìä –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –≤ Google Sheets
            if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
                try:
                    sheets_manager.sync_reminder(reminder, "DELETE")
                    logger.info(f"üìä Successfully synced reminder #{reminder_id} deletion to Google Sheets")
                except Exception as e:
                    logger.error(f"‚ùå Error syncing reminder deletion to Google Sheets: {e}")
            elif SHEETS_AVAILABLE and sheets_manager and not sheets_manager.is_initialized:
                logger.warning(f"üìµ Google Sheets not initialized - reminder #{reminder_id} deletion not synced")
            
    except Exception as e:
        logger.error(f"‚ùå Critical error in send_reminder: {e}")
        
        # üìä –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ Google Sheets
        if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
            try:
                utc_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                moscow_time = get_moscow_time().strftime("%H:%M MSK")
                sheets_manager.log_send_history(
                    utc_time=utc_time,
                    moscow_time=moscow_time,
                    reminder_id=reminder.get('id', 'unknown') if 'reminder' in locals() else 'unknown',
                    chat_id="ERROR",
                    status="CRITICAL_ERROR",
                    error=str(e),
                    text_preview="Critical error in send_reminder function"
                )
            except:
                pass  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª

def schedule_reminder(job_queue, reminder):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ –≤ JobQueue –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —Ç–∞–∫–∏–º –∂–µ ID, –µ—Å–ª–∏ –µ—Å—Ç—å
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name == f"reminder_{reminder.get('id')}":
                job.schedule_removal()
        
        if reminder["type"] == "once":
            # –ü–∞—Ä—Å–∏–º –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
            moscow_dt = datetime.strptime(reminder["datetime"], "%Y-%m-%d %H:%M")
            moscow_dt = MOSCOW_TZ.localize(moscow_dt)
            utc_dt = moscow_dt.astimezone(pytz.UTC).replace(tzinfo=None)
            
            if moscow_dt > get_moscow_time():  # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                job_queue.run_once(send_reminder, utc_dt, context=reminder, name=f"reminder_{reminder.get('id')}")
                logger.info(f"Scheduled one-time reminder {reminder.get('id')} for {moscow_dt.strftime('%Y-%m-%d %H:%M MSK')}")
                
        elif reminder["type"] == "daily":
            h, m = map(int, reminder["time"].split(":"))
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ, –∑–∞—Ç–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
            moscow_time = dt_time(hour=h, minute=m)
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω—É–∂–Ω–æ —É—á–µ—Å—Ç—å —Å–º–µ—â–µ–Ω–∏–µ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(send_reminder, utc_time, context=reminder, name=f"reminder_{reminder.get('id')}")
            logger.info(f"Scheduled daily reminder {reminder.get('id')} for {h:02d}:{m:02d} MSK (UTC: {utc_hour:02d}:{m:02d})")
            
        elif reminder["type"] == "weekly":
            days_map = {
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0, "–≤—Ç–æ—Ä–Ω–∏–∫": 1, "—Å—Ä–µ–¥–∞": 2,
                "—á–µ—Ç–≤–µ—Ä–≥": 3, "–ø—è—Ç–Ω–∏—Ü–∞": 4, "—Å—É–±–±–æ—Ç–∞": 5, "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
            }
            weekday = days_map[reminder["day"].lower()]
            h, m = map(int, reminder["time"].split(":"))
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –≤ UTC
            utc_hour = (h - 3) % 24  # MSK = UTC+3
            utc_time = dt_time(hour=utc_hour, minute=m)
            
            job_queue.run_daily(
                send_reminder,
                utc_time,
                context=reminder,
                days=(weekday,),
                name=f"reminder_{reminder.get('id')}"
            )
            logger.info(f"Scheduled weekly reminder {reminder.get('id')} for {reminder['day']} {h:02d}:{m:02d} MSK")
            
    except Exception as e:
        logger.error(f"Error scheduling reminder {reminder.get('id', 'unknown')}: {e}")

def schedule_all_reminders(job_queue):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤—ã–≤–∞–µ—Ç –∏—Ö.
    """
    try:
        reminders = load_reminders()
        for reminder in reminders:
            schedule_reminder(job_queue, reminder)
    except Exception as e:
        logger.error(f"Error scheduling all reminders: {e}")

def reschedule_all_reminders(job_queue):
    """
    –ü–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è)
    """
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        current_jobs = job_queue.jobs()
        for job in current_jobs:
            if hasattr(job, 'name') and job.name and job.name.startswith('reminder_'):
                job.schedule_removal()
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
        schedule_all_reminders(job_queue)
    except Exception as e:
        logger.error(f"Error rescheduling reminders: {e}")

# --- –§—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ ---

def ensure_subscribed_chats_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç subscribed_chats.json –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ –ø—É—Å—Ç–æ–π –ª–∏ –æ–Ω
        with open("subscribed_chats.json", "r") as f:
            chats = json.load(f)
            if chats and len(chats) > 0:
                logger.info(f"‚úÖ Found {len(chats)} existing subscribed chats")
                return True  # –§–∞–π–ª –≤ –ø–æ—Ä—è–¥–∫–µ
    except (FileNotFoundError, json.JSONDecodeError, TypeError):
        pass  # –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
    
    # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Sheets
    logger.warning("‚ö†Ô∏è subscribed_chats.json is missing or empty. Attempting restore from Google Sheets...")
    logger.info(f"üîç Google Sheets availability check:")
    logger.info(f"   SHEETS_AVAILABLE: {SHEETS_AVAILABLE}")
    logger.info(f"   sheets_manager exists: {sheets_manager is not None}")
    
    if sheets_manager:
        logger.info(f"   sheets_manager.is_initialized: {sheets_manager.is_initialized}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        sheets_id = os.environ.get('GOOGLE_SHEETS_ID')
        sheets_creds = os.environ.get('GOOGLE_SHEETS_CREDENTIALS')
        logger.info(f"   GOOGLE_SHEETS_ID present: {bool(sheets_id)}")
        logger.info(f"   GOOGLE_SHEETS_CREDENTIALS present: {bool(sheets_creds)}")
        
        if sheets_id:
            logger.info(f"   Using Sheet ID: {sheets_id[:20]}...{sheets_id[-10:] if len(sheets_id) > 30 else sheets_id}")
    
    if SHEETS_AVAILABLE and sheets_manager and sheets_manager.is_initialized:
        if sheets_manager.restore_subscribed_chats_file():
            logger.info("‚úÖ Successfully restored subscribed chats from Google Sheets")
            return True
        else:
            logger.error("‚ùå Failed to restore from Google Sheets")
    else:
        logger.warning("üìµ Google Sheets not available for restoration")
        logger.warning("   This means:")
        logger.warning("   1. Check GOOGLE_SHEETS_ID environment variable")
        logger.warning("   2. Check GOOGLE_SHEETS_CREDENTIALS environment variable") 
        logger.warning("   3. Verify Google Sheets API access")
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ fallback —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
    logger.warning("üìù Creating empty subscribed_chats.json as fallback")
    logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–µ–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤!")
    logger.warning("   –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–Ω–æ:")
    logger.warning("   1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start –≤ Telegram —á–∞—Ç–∞—Ö")
    logger.warning("   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Google Sheets –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
    
    with open("subscribed_chats.json", "w") as f:
        json.dump([], f)
    
    return False

def auto_sync_subscribed_chats(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è subscribed_chats.json —Å Google Sheets –∫–∞–∂–¥—ã–π —á–∞—Å"""
    try:
        moscow_time = get_moscow_time().strftime("%H:%M MSK")
        logger.info(f"üîÑ Starting hourly sync at {moscow_time}")
        
        if SHEETS_AVAILABLE and sheets_manager:
            success = sheets_manager.sync_subscribed_chats_from_sheets()
            if success:
                logger.info(f"‚úÖ Hourly sync completed successfully at {moscow_time}")
            else:
                logger.warning(f"‚ö†Ô∏è Hourly sync had issues at {moscow_time}")
        else:
            logger.warning(f"üìµ Google Sheets not available for sync at {moscow_time}")
            
    except Exception as e:
        logger.error(f"‚ùå Error in hourly sync: {e}")

def emergency_restore_subscribed_chats(context: CallbackContext):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    try:
        logger.warning("üö® Emergency restore triggered - checking subscribed_chats.json")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        try:
            with open("subscribed_chats.json", "r") as f:
                chats = json.load(f)
                if chats and len(chats) > 0:
                    logger.info(f"üìã Current file contains {len(chats)} chats - no restore needed")
                    return
        except:
            pass
        
        # –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        logger.warning("üîß Attempting emergency restore from Google Sheets")
        ensure_subscribed_chats_file()
        
    except Exception as e:
        logger.error(f"‚ùå Error in emergency restore: {e}")

def main():
    try:
        token = os.environ['BOT_TOKEN']
        port = int(os.environ.get('PORT', 8000))
        updater = Updater(token=token, use_context=True)
        
        # Reset any existing webhook so polling can start cleanly
        try:
            res = updater.bot.delete_webhook(drop_pending_updates=True)
            logger.info("Webhook deleted: %s", res)
        except Exception as e:
            logger.error("Error deleting webhook: %s", e)
        
        dp = updater.dispatcher
        
        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ò –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ü–û–î–ü–ò–°–ö–ò –ü–†–ò –ó–ê–ü–£–°–ö–ï
        logger.info("üîß Checking subscribed_chats.json...")
        ensure_subscribed_chats_file()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –ü–ï–†–í–´–ú–ò
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CommandHandler("test", test))
        
        conv = ConversationHandler(
            entry_points=[CommandHandler("remind", start_add_one_reminder)],
            states={
                REMINDER_DATE: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_datetime)],
                REMINDER_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_reminder_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv)
        
        conv_daily = ConversationHandler(
            entry_points=[CommandHandler("remind_daily", start_add_daily_reminder)],
            states={
                DAILY_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_daily_time)],
                DAILY_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_daily_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_daily)

        conv_weekly = ConversationHandler(
            entry_points=[CommandHandler("remind_weekly", start_add_weekly_reminder)],
            states={
                WEEKLY_DAY: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_day)],
                WEEKLY_TIME: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_time)],
                WEEKLY_TEXT: [MessageHandler(Filters.text & ~Filters.command, receive_weekly_text)],
            },
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_weekly)
        
        dp.add_handler(CommandHandler("list_reminders", list_reminders))
        
        conv_del = ConversationHandler(
            entry_points=[CommandHandler("del_reminder", start_delete_reminder)],
            states={REM_DEL_ID: [MessageHandler(Filters.text & ~Filters.command, confirm_delete_reminder)]},
            fallbacks=[CommandHandler("cancel", cancel_reminder)],
            allow_reentry=True,
        )
        dp.add_handler(conv_del)
        
        dp.add_handler(CommandHandler("clear_reminders", clear_reminders))
        dp.add_handler(CommandHandler("restore_reminders", restore_reminders))
        dp.add_handler(CommandHandler("next", next_notification))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dp.add_error_handler(error_handler)

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        schedule_all_reminders(updater.job_queue)
        
        # –î–æ–±–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞—Å—ã–ø–∞–Ω–∏—è –Ω–∞ Render
        updater.job_queue.run_repeating(ping_self, interval=300, first=30)
        
        # ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–û–î–ü–ò–°–û–ö –ö–ê–ñ–î–´–ô –ß–ê–°
        updater.job_queue.run_repeating(auto_sync_subscribed_chats, interval=3600, first=300)  # –ö–∞–∂–¥—ã–π —á–∞—Å, –ø–µ—Ä–≤—ã–π —á–µ—Ä–µ–∑ 5 –º–∏–Ω
        logger.info("üîÑ Scheduled hourly subscribed chats sync")

        # Health check server for Render free tier
        threading.Thread(target=start_health_server, daemon=True).start()
        
        # Always run in polling mode
        updater.bot.delete_webhook(drop_pending_updates=True)
        updater.start_polling(drop_pending_updates=True)
        logger.info("Bot started successfully in polling mode")
        updater.idle()
        
    except Exception as e:
        logger.error(f"Critical error in main: {e}")
        
if __name__ == "__main__":
    main()
